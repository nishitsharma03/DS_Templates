//#pragma GCC optimize "trapv"
#pragma GCC optimize("Ofast")
#pragma GCC optimize("O3", "unroll-loops")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define ll long long int
#define fab(a,b,i) for(int i=a;i<b;i++)
#define pb push_back
#define db double
#define mp make_pair
#define endl "\n"
#define f first
#define se second
#define all(x) x.begin(),x.end()
#define MOD 1000000007
#define vll vector<ll>
#define vi vector<int>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define quick ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
ll add(ll x, ll y) {ll res = x + y; return (res >= MOD ? res - MOD : res);}
ll mul(ll x, ll y) {ll res = x * y; return (res >= MOD ? res % MOD : res);}
ll sub(ll x, ll y) {ll res = x - y; return (res < 0 ? res + MOD : res);}
ll power(ll x, ll y) {ll res = 1; x %= MOD; while (y) {if (y & 1)res = mul(res, x); y >>= 1; x = mul(x, x);} return res;}
ll mod_inv(ll x) {return power(x, MOD - 2);}

using namespace std;
const int N = 1e5 + 5;
int prime[N * 10];
map<int, int > seg[2 * N];
int n;
int a[N];

void seive()
{
	for ( ll i = 2; i < N * 10; i++)
	{
		if (!prime[i])
		{
			prime[i] = i;
			for ( ll j = i * i; j < N * 10; j += i)
			{
				if (!prime[j])
					prime[j] = i;

			}
		}
	}
}

void getfactors( int x, map<int, int > &m)
{
	while (x > 1)
	{
		m[prime[x]]++;
		x /= prime[x];
	}


}

void comb( map<int, int> &m, map<int, int> &k, map<int, int> &res)
{
	for (auto i : m)
	{
		res[i.f] += i.se;
	}
	for (auto i : k)
	{
		res[i.f] += i.se;
	}

}


void del( int x, map<int, int > &m)
{
	while (x > 1)
	{
		m[prime[x]]--;
		if (m[prime[x]] == 0)
			m.erase(prime[x]);
		x /= prime[x];
	}


}




void build()
{
	for ( int i = 0; i < n; i++)
	{
		getfactors(a[i], seg[i + n]);
	}

	for ( int i = n - 1; i > 0; i--)
	{
		comb(seg[i * 2], seg[i * 2 + 1], seg[i]);
	}
}



void update( int ind, int val)
{
	int x = a[ind];
	a[ind] = val;
	del(x, seg[ind + n]);

	getfactors(val, seg[ind + n]);

	for ( int  i = ind + n; i > 1; i >>= 1)
	{
		del(x, seg[i >> 1]);
		getfactors(val, seg[i >> 1]);

	}
}

void comb1(map<int, int> &m, map<int, int> &k)
{
	for (auto i : k)
	{
		m[i.f] += i.se;
	}
}

ll query(int l , int r)
{

	l += n;
	r += n;
	map<int, int> ans;
	while (l < r)
	{
		if (l & 1)
		{
			comb1(ans, seg[l]);
			l++;

		}
		if (r & 1)
		{
			comb1(ans, seg[--r]);
		}
		l /= 2;
		r /= 2;
	}
	ll val = 1;
	ll facs = 1;
	for (auto i : ans)
	{
		val = mul(val, power(1LL * i.f, 1LL * i.se));
		facs = mul(facs, mul((1LL * i.f - 1LL), mod_inv(1LL * i.f)));
	}
	facs = mul(facs, val);
	return facs;
}





int main()
{	quick;
#ifndef ONLINE_JUDGE
	freopen("D:/sublime/input.txt", "r", stdin);
	freopen("D:/sublime/output.txt", "w", stdout);
#endif
	seive();
	int m;
	cin >> n >> m;
	fab(0, n, i)
	{
		cin >> a[i];
	}
	build();
	while (m--)
	{
		int tp;
		cin >> tp;
		ll x, y;
		cin >> x >> y;
		if (tp == 1)
		{
			update(x - 1, y);
		}
		else
		{
			ll ans = query(x - 1, y);
			cout << ans << endl;
		}

	}



	cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl;
	return 0;
}
